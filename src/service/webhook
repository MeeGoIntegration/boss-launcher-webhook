#!/usr/bin/env python
# Copyright (C) 2017 Jolla Ltd.
#
# All rights reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to
# the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

"""
The webhook service creates and manages a webhook which causes the package to
be rebuilt when a tag is pushed to a git service.

Use <param name="name">value</param>

Required params:
  "repourl"  <url>         Which repo is sending events.
                           Eg: "https://github.com/mer-hybris/libhybris.git"
  "branch"   <branch>      Webhook branch; eg: "pkg-mer"

Optional params:
  "token"    <token>       Optional webhook filtering token
  "debian"   <Y|N>         Is this a debian package
                           (default:N)
  "dumb"     <Y|N>         Is this a dumb package (eg tarball in git)
                           (default:N)
  "build"    <true|false>  "true" to enable this webhook to trigger builds
                           (default:true)
  "notify"   <true|false>  "true" to send notifications on action
                           (default:true)
  "comment"  <comment>     Appears in the webhook list view

Don't forget to make sure the git service webhook settings are set correctly
"""
from __future__ import print_function
import argparse
import requests
import os


class Service(object):
    def __init__(self, *args):
        # config options for this host
        self._read_conf("/etc/obs/services/webhook")
        # config options for this user
        self._read_conf(os.path.expanduser("~/.obs/webhook"))
        # config options from environment
        self._read_conf()

        self.auth = (self.WH_USER, self.WH_PASSWD)
        self.project = os.environ['OBS_SERVICE_PROJECT']
        self.package = os.environ['OBS_SERVICE_PACKAGE']
        self._parse_args(args or None)

        self.new_whm = {
            "obs": self.OBS,
            "user": self.WH_USER,
            "repourl": self.args.repourl,
            "branch": self.args.branch,
            "project": self.project,
            "package": self.package,
            "token": self.args.token,
            "debian": self.args.debian,
            "dumb": self.args.dumb,
            "notify": self.args.notify == 'true',
            "build": self.args.build == 'true',
            "comment": self.args.comment,
        }

    def _read_conf(self, filename=None):
        if filename:
            if not os.path.exists(filename):
                return
            data = {}
            with open(filename) as fd:
                for line in fd.readlines():
                    line = line.strip()
                    if line[0] == "#":
                        continue
                    try:
                        key, value = line.split("=", 1)
                    except ValueError:
                        continue
                    key = key.strip()
                    value = value.strip()
                    data[key] = value
        else:
            data = os.environ

        defaults = {
            "WH_USER": "admin",
            "WH_PASSWD": "root",
            "OBS": "mer",
            "WEBHOOK_URL": "http://127.0.0.1:8000/webhook/api",
            "DEBUG": False,
        }
        for key, value in defaults.iteritems():
            if key in data:
                value = data[key]
            setattr(self, key, value)

    def _parse_args(self, args):
        parser = argparse.ArgumentParser(
            description=__doc__,
            formatter_class=argparse.RawTextHelpFormatter,
        )
        parser.add_argument(
            '--repourl',
            required=True,
            help=argparse.SUPPRESS,
        )
        parser.add_argument(
            '--branch',
            required=True,
            help=argparse.SUPPRESS,
        )
        parser.add_argument(
            '--token',
            default='',
            help=argparse.SUPPRESS,
        )
        parser.add_argument(
            '--debian',
            choices=['Y', 'N'],
            default='N',
            help=argparse.SUPPRESS,
        )
        parser.add_argument(
            '--dumb',
            choices=['Y', 'N'],
            default='N',
            help=argparse.SUPPRESS,
        )
        parser.add_argument(
            '--build',
            choices=['true', 'false'],
            default='true',
            help=argparse.SUPPRESS,
        )
        parser.add_argument(
            '--notify',
            choices=['true', 'false'],
            default='true',
            help=argparse.SUPPRESS,
        )
        parser.add_argument(
            '--comment',
            default='',
            help=argparse.SUPPRESS,
        )
        self.args = parser.parse_args(args=args)

    @property
    def old_whm(self):
        if not hasattr(self, '_old_whm'):
            params = {
                'obs': self.OBS,
                'project': self.project,
                'package': self.package,
            }
            self._debug('Fetching old whm')
            self._debug(params)
            r = requests.get(
                '%s/webhookmappings/' % self.WEBHOOK_URL,
                auth=self.auth,
                params=params,
            )
            r.raise_for_status()
            response = r.json()
            self._debug(response)
            if response['count'] > 1:
                raise Exception(
                    'More than one webhook mapping found for %s' % (params,)
                )
            elif response['count'] == 0:
                self._debug('No old whm found')
                self._old_whm = None
            else:
                self._old_whm = response['results'][0]
                self._debug('Got old whm')
                self._debug(self._old_whm)
        return self._old_whm

    def update_old_whm(self):
        self._debug(
            "Updating old whm for %s %s on %s" %
            (self.old_whm['project'], self.old_whm['package'],
             self.old_whm['obs'])
        )
        r = requests.patch(
            '%s/webhookmappings/%s/' % (self.WEBHOOK_URL, self.old_whm['id']),
            auth=self.auth,
            json=self.new_whm,
        )
        r.raise_for_status()
        result = r.json()
        self._debug(result)
        return result

    def create_new_whm(self):
        self._debug(
            "Creating new whm for %s %s on %s" %
            (self.new_whm['project'], self.new_whm['package'],
             self.new_whm['obs'])
        )
        r = requests.post(
            '%s/webhookmappings/' % self.WEBHOOK_URL,
            auth=self.auth,
            json=self.new_whm,
        )
        r.raise_for_status()
        result = r.json()
        self._debug(result)
        return result

    def trigger_whm(self, whm):
        self._debug(
            "Triggering whm %s for %s %s on %s" %
            (whm['id'], whm['project'], whm['package'], whm['obs'])
        )
        r = requests.put(
            '%s/webhookmappings/%s/trigger/' % (self.WEBHOOK_URL, whm['id']),
            auth=self.auth,
        )
        r.raise_for_status()
        result = r.json()
        self._debug(result)
        return result

    @property
    def whm_needs_update(self):
        keys = [
            "repourl",
            "branch",
            "project",
            "package",
            "token",
            "debian",
            "dumb",
            "notify",
            "build",
            "comment",
        ]
        errors = []

        for key in keys:
            old = self.old_whm.get(key, None)
            new = self.new_whm.get(key, None)
            if old != new:
                errors.append(
                    "%s: differs (%s != %s)" %
                    (key, old, new)
                )

        if len(errors) > 0:
            self._debug("Don't match:")
            for e in errors:
                self._debug(" %s" % e)
            return True
        return False

    def _debug(self, msg):
        if self.DEBUG:
            print(msg)

    def main(self):
        if self.old_whm:
            if self.whm_needs_update:
                self.update_old_whm()
                self.trigger_whm(self.old_whm)
        else:
            whm = self.create_new_whm()
            self.trigger_whm(whm)


if __name__ == '__main__':
    s = Service()
    s.main()
