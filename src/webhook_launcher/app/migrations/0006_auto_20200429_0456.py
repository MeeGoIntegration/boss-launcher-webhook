# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-04-29 04:56
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0005_flag_old_placeholders'),
    ]

    operations = [
        migrations.AlterField(
            model_name='buildservice',
            name='namespace',
            field=models.CharField(help_text='This is also used to identify the OBS alias in BOSS processes', max_length=50, unique=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='allowed',
            field=models.BooleanField(default=True, help_text='If not set then webhooks are not allowed for this project. This is useful for projects which should only have specific versions of packages promoted to them.'),
        ),
        migrations.AlterField(
            model_name='project',
            name='gated',
            field=models.BooleanField(default=False, help_text='If set then webhooks pointing at this project will be triggered to a side project instead and then an autopromotion attempted. This is useful for projects which apply formal entry checks and/or QA.'),
        ),
        migrations.AlterField(
            model_name='project',
            name='match',
            field=models.CharField(blank=True, help_text='If set then used as well as name to re.match() project names', max_length=250, null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='name',
            field=models.CharField(help_text='The OBS project name. eg nemo:mw', max_length=250),
        ),
        migrations.AlterField(
            model_name='project',
            name='official',
            field=models.BooleanField(default=True, help_text='If set then only valid namespaces can be used for the git repo'),
        ),
        migrations.AlterField(
            model_name='relaytarget',
            name='active',
            field=models.BooleanField(default=True, help_text='Whether this relay will fire on matching events'),
        ),
        migrations.AlterField(
            model_name='relaytarget',
            name='name',
            field=models.CharField(help_text='Friendly name of recipient, for example: Organization name', max_length=50),
        ),
        migrations.AlterField(
            model_name='relaytarget',
            name='sources',
            field=models.ManyToManyField(help_text='List of VCS namespaces (for example github organization or gitlab groups)', to='app.VCSNameSpace'),
        ),
        migrations.AlterField(
            model_name='relaytarget',
            name='url',
            field=models.CharField(help_text='HTTP(S) endpoint which will receive POST of GIT events (for example http://webhook.example.com/webhook/)', max_length=200),
        ),
        migrations.AlterField(
            model_name='relaytarget',
            name='verify_SSL',
            field=models.BooleanField(default=True, help_text='Turn on SSL certificate verification'),
        ),
        migrations.AlterField(
            model_name='vcsnamespace',
            name='default_project',
            field=models.ForeignKey(blank=True, help_text='Default project for webhook placeholder creation', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Project'),
        ),
        migrations.AlterField(
            model_name='vcsnamespace',
            name='path',
            field=models.CharField(help_text='the network path (gitlab group or github organization eg. /mer-core)', max_length=200),
        ),
        migrations.AlterField(
            model_name='vcsnamespace',
            name='service',
            field=models.ForeignKey(help_text='VCS service where this namespace is hosted', on_delete=django.db.models.deletion.CASCADE, to='app.VCSService'),
        ),
        migrations.AlterField(
            model_name='vcsservice',
            name='ips',
            field=models.TextField(blank=True, help_text='Known IP adresses of this service (optional)', null=True),
        ),
        migrations.AlterField(
            model_name='vcsservice',
            name='name',
            field=models.CharField(help_text='Friendly name of this VCS hosting service', max_length=50, unique=True),
        ),
        migrations.AlterField(
            model_name='vcsservice',
            name='netloc',
            field=models.CharField(help_text='Network location from payload (for example: git@git.merproject.org:1234)', max_length=200, unique=True),
        ),
        migrations.AlterField(
            model_name='webhookmapping',
            name='branch',
            field=models.CharField(default='master', help_text='name of branch to use. If not specified default branch (or currently checked out one) will be used', max_length=100),
        ),
        migrations.AlterField(
            model_name='webhookmapping',
            name='build',
            field=models.BooleanField(default=True, help_text='Enable OBS build triggering'),
        ),
        migrations.AlterField(
            model_name='webhookmapping',
            name='comment',
            field=models.TextField(blank=True, default='', null=True),
        ),
        migrations.AlterField(
            model_name='webhookmapping',
            name='debian',
            field=models.CharField(blank=True, choices=[('N', 'N'), ('Y', 'Y')], default='', help_text='Choose Y to turn on debian packaging support', max_length=2, null=True),
        ),
        migrations.AlterField(
            model_name='webhookmapping',
            name='dumb',
            field=models.CharField(blank=True, choices=[('N', 'N'), ('Y', 'Y')], default='', help_text='Choose Y to take content of revision as-is without automatic processing (example: tarballs in git)', max_length=2, null=True),
        ),
        migrations.AlterField(
            model_name='webhookmapping',
            name='notify',
            field=models.BooleanField(default=True, help_text='Enable IRC notifications of events'),
        ),
        migrations.AlterField(
            model_name='webhookmapping',
            name='package',
            field=models.CharField(help_text='name of the package to create or update in OBS', max_length=250),
        ),
        migrations.AlterField(
            model_name='webhookmapping',
            name='placeholder',
            field=models.BooleanField(default=False, editable=False, help_text='Marks automatically created placeholders for filtering in admin UI'),
        ),
        migrations.AlterField(
            model_name='webhookmapping',
            name='project',
            field=models.CharField(help_text='name of an existing project under which to create or update the package', max_length=250),
        ),
        migrations.AlterField(
            model_name='webhookmapping',
            name='repourl',
            field=models.CharField(help_text='url of git repo to clone from. Should be a remote http[s]', max_length=200),
        ),
        migrations.AlterField(
            model_name='webhookmapping',
            name='token',
            field=models.CharField(blank=True, default='', help_text='a token that should exist in tag names and changelog entry headers to enable handling them', max_length=100, null=True),
        ),
    ]
