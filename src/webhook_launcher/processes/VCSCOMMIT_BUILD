# Copyright (C) 2013 Jolla Ltd.
# Contact: Islam Amer <islam.amer@jollamobile.com>
# All rights reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

Ruote.process_definition 'wh_trigger_build' do

  sequence do
    set :f => 'priority', :value => 'high'
    set :f => 'debug_dump', :value => 'true'
    set :f => 'log_channel', :value => '#mer-boss'
    set :f => 'highlight', :value => ''
    # Any error will get notified by this flanked suprocess
    on_error "do_log_error"

    # Mer projects are not created by this process
    # This should be conditional though
    create_project
    trigger_service :on_error => "do_service_error"
    # We wait for the source before checking the build results as
    # is_repo_published can fail if the service is still running
    do_wait_for_src

    _if '"${gated_project}" != ""' do
      sequence do
        do_wait_for_build
        auto_promote
      end
    end
  end

  define 'do_service_error' do
    notify_irc :if => '"${log_channel}" != ""',
               :msg => 'Error triggering service in ${project}/${package}. Check cibot has access.',
               :irc_channel => '${log_channel}'
    terminate
  end

  define 'do_log' do
    echo 'process ${wfid}: ${v:msg}'
    notify_irc :if => '"${log_channel}" != ""',
               :msg => 'process ${wfid} ${v:msg}',
               :irc_channel => '${log_channel}'
  end

  define 'do_wait_for_src' do
    do_log :msg => 'Waiting for ${project}/${package} source'
    set 'v:timeout_step' => "getting source state"
    repeat :timeout => '4h', :on_timeout => 'do_log_timeout' do
      wait '2m'
      get_src_state :project => '${project}', :package => '$package'
      _break :if => '${f:service_state}' != "running"
    end
    _if '"${service_state}" != "succeeded"' do
      error "Failed to get source for ${project}/${package}"
    end
  end

  define 'do_wait_for_build' do
    do_log :msg => 'Waiting for ${project} to build'
    set 'v:timeout_step' => "wating for repo publish"
    repeat :timeout => '48h', :on_timeout => 'do_log_timeout' do
      wait '2m'
      is_repo_published :project => '${project}', :package => '$package'
      _break :if => '${f:__result__}'
    end
  end

  define 'do_log_error' do
    echo 'process ${wfid}: SR#${ev.id} ERROR'
    notify_irc :if => '"${log_channel}" != ""',
               :msg => '${highlight} process ${wfid} ERROR ${__error__.message}',
               :irc_channel => '${log_channel}'
    #notify :template => '${template.error}', :mail_to => "$f:admin_emails",
    #       :subject => '[${pname}] ${wfid} SR#${req.id} ERROR'
    terminate
  end

  define 'do_log_timeout' do
    echo 'process ${wfid}: SR#${ev.id} TIMEOUT'
    notify_irc :if => '"${log_channel}" != ""',
               :msg => '${highlight} TIMEOUT for ${project}/${package} ${v:timeout_step}',
               :irc_channel => '${log_channel}'
    terminate
  end

end
